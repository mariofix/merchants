import datetime
import logging
from uuid import uuid4

import peewee

from ..config import default_settings
from ..core.schemas import ModelStatus
from ..exceptions import ProcessError
from ..integrations import create_provider


class MerchantsAccountSettings(peewee.Model):
    account_name = peewee.CharField(max_length=64, unique=True, null=False)
    account_settings = peewee.TextField(
        null=False, help_text="JSON|dict with the Settings for the Integration", verbose_name="Settings"
    )
    integration_class = peewee.CharField(max_length=255, null=False)
    enabled = peewee.BooleanField(null=False, default=False)

    def __str__(self) -> str:
        return self.account_name

    def _export_config(self) -> dict:
        return (
            {
                "account_name": self.account_name,
                "enabled": self.enabled,
                "integration_class": self.integration_class,
                "account_settings": self.account_settings,
            }
            if self.enabled
            else {}
        )


class MerchantsBaseModel(peewee.Model):
    variant = peewee.CharField(
        max_length=64,
        null=False,
        help_text="The name of the variant as specified in the config file",
        verbose_name="Variant Name",
    )
    variant_transaction_id = peewee.TextField(
        null=True, help_text="The transaction ID returned by the variant", verbose_name="Variant Transaction ID"
    )
    variant_data = peewee.TextField(null=True, help_text="Datapack sent to variant", verbose_name="Variant Data")
    variant_response = peewee.TextField(
        null=True, help_text="The varant's response data", verbose_name="Variant Response Data"
    )

    status = peewee.CharField(
        max_length=16,
        default=ModelStatus.CREATED,
        null=False,
        help_text="See merchants.core.schemas.ModelStatus",
        verbose_name="Payment Status",
    )
    transaction = peewee.UUIDField(
        unique=True, null=False, help_text="Payment Transaction (autogenerated)", verbose_name="Transaction"
    )
    customer_name = peewee.CharField(
        max_length=128, null=True, help_text="Customer's name", verbose_name="Customer name"
    )
    customer_email = peewee.CharField(
        max_length=128, null=False, help_text="Customer's email", verbose_name="Customer Email"
    )
    description = peewee.CharField(
        max_length=255, null=True, help_text="Payment Description/Subject", verbose_name="Description/Subject"
    )
    currency = peewee.CharField(
        max_length=3,
        null=False,
        default="USD",
        help_text="One alphabetic code as defined in ISO 4217",
        verbose_name="Currency",
    )
    created = peewee.DateTimeField(
        default=datetime.datetime.now, help_text="Creation date", verbose_name="Date Created"
    )
    modified = peewee.DateTimeField(
        help_text="Last modification date (see variant_response for the different objects)",
        verbose_name="Last Modification",
    )
    tax = peewee.DecimalField(
        decimal_places=2, default=0, help_text="If specified will, be added to the total", verbose_name="Tax Amount"
    )
    delivery = peewee.DecimalField(
        decimal_places=2,
        default=0,
        help_text="If specified will, be added to the total",
        verbose_name="Delivery Amount",
    )
    total = peewee.DecimalField(decimal_places=2, default=0, help_text="Total Amount", verbose_name="Total Amount")
    extra_data = peewee.TextField(
        null=False, help_text="dict|json with any extra information for the variant.", verbose_name="Extra Information"
    )

    def save(self, *args, **kwargs):
        if not self.transaction:
            self.transaction = uuid4()

        if not default_settings.process_on_save:
            return super().save(*args, **kwargs)

        try:
            model = super().save(*args, **kwargs)
        except Exception as e:
            print(e)

        model.process_payment()
        return model

    def __str__(self) -> str:
        return f"{self.transaction}"

    def process_payment(self):
        variant = create_provider(self.variant)
        try:
            return variant.create(self)
        except ProcessError as error:
            logging.error(error)
            raise ProcessError("There was a problem with this payment.")
